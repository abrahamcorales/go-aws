// Code generated by mockery v2.15.0. DO NOT EDIT.

package sqs

import (
	servicesqs "github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"

	types "github.com/aws/aws-sdk-go-v2/service/sqs/types"
)

// MockSpec is an autogenerated mock type for the Spec type
type MockSpec struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: msg
func (_m *MockSpec) DeleteMessage(msg *string) {
	_m.Called(msg)
}

// GetSqsMessages provides a mock function with given fields:
func (_m *MockSpec) GetSqsMessages() (*servicesqs.ReceiveMessageOutput, error) {
	ret := _m.Called()

	var r0 *servicesqs.ReceiveMessageOutput
	if rf, ok := ret.Get(0).(func() *servicesqs.ReceiveMessageOutput); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicesqs.ReceiveMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMessages provides a mock function with given fields: execute
func (_m *MockSpec) ReadMessages(execute func(types.Message) error) {
	_m.Called(execute)
}

// SendMessage provides a mock function with given fields: msg
func (_m *MockSpec) SendMessage(msg interface{}) (*servicesqs.SendMessageOutput, error) {
	ret := _m.Called(msg)

	var r0 *servicesqs.SendMessageOutput
	if rf, ok := ret.Get(0).(func(interface{}) *servicesqs.SendMessageOutput); ok {
		r0 = rf(msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicesqs.SendMessageOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockSpec interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockSpec creates a new instance of MockSpec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockSpec(t mockConstructorTestingTNewMockSpec) *MockSpec {
	mock := &MockSpec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
