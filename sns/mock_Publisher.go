// Code generated by mockery v2.25.0. DO NOT EDIT.

package sns

import mock "github.com/stretchr/testify/mock"

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

// Publish provides a mock function with given fields: i
func (_m *MockPublisher) Publish(i interface{}) error {
	ret := _m.Called(i)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(i)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishWithMsgAttributes provides a mock function with given fields: i, ma
func (_m *MockPublisher) PublishWithMsgAttributes(i interface{}, ma map[string]interface{}) error {
	ret := _m.Called(i, ma)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, map[string]interface{}) error); ok {
		r0 = rf(i, ma)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishWithOptions provides a mock function with given fields: i, ops
func (_m *MockPublisher) PublishWithOptions(i interface{}, ops Options) error {
	ret := _m.Called(i, ops)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, Options) error); ok {
		r0 = rf(i, ops)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockPublisher(t mockConstructorTestingTNewMockPublisher) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
